// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: optionhub.proto

package optionhub_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OptionhubService_GetOsBySearchName_FullMethodName = "/OptionhubService/GetOsBySearchName"
	OptionhubService_GetOsByID_FullMethodName         = "/OptionhubService/GetOsByID"
	OptionhubService_GetAllOs_FullMethodName          = "/OptionhubService/GetAllOs"
	OptionhubService_AddOs_FullMethodName             = "/OptionhubService/AddOs"
	OptionhubService_SetOsByID_FullMethodName         = "/OptionhubService/SetOsByID"
	OptionhubService_DeleteOsByID_FullMethodName      = "/OptionhubService/DeleteOsByID"
)

// OptionhubServiceClient is the client API for OptionhubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionhubServiceClient interface {
	GetOsBySearchName(ctx context.Context, in *GetByNameIn, opts ...grpc.CallOption) (*GetByNameOut, error)
	GetOsByID(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error)
	GetAllOs(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error)
	AddOs(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error)
	SetOsByID(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error)
	DeleteOsByID(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error)
}

type optionhubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionhubServiceClient(cc grpc.ClientConnInterface) OptionhubServiceClient {
	return &optionhubServiceClient{cc}
}

func (c *optionhubServiceClient) GetOsBySearchName(ctx context.Context, in *GetByNameIn, opts ...grpc.CallOption) (*GetByNameOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByNameOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetOsBySearchName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetOsByID(ctx context.Context, in *GetByIdIn, opts ...grpc.CallOption) (*GetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetOsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) GetAllOs(ctx context.Context, in *GetAllIn, opts ...grpc.CallOption) (*GetAllOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOut)
	err := c.cc.Invoke(ctx, OptionhubService_GetAllOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) AddOs(ctx context.Context, in *AddIn, opts ...grpc.CallOption) (*AddOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOut)
	err := c.cc.Invoke(ctx, OptionhubService_AddOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) SetOsByID(ctx context.Context, in *SetByIdIn, opts ...grpc.CallOption) (*SetByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_SetOsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionhubServiceClient) DeleteOsByID(ctx context.Context, in *DeleteByIdIn, opts ...grpc.CallOption) (*DeleteByIdOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByIdOut)
	err := c.cc.Invoke(ctx, OptionhubService_DeleteOsByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionhubServiceServer is the server API for OptionhubService service.
// All implementations must embed UnimplementedOptionhubServiceServer
// for forward compatibility.
type OptionhubServiceServer interface {
	GetOsBySearchName(context.Context, *GetByNameIn) (*GetByNameOut, error)
	GetOsByID(context.Context, *GetByIdIn) (*GetByIdOut, error)
	GetAllOs(context.Context, *GetAllIn) (*GetAllOut, error)
	AddOs(context.Context, *AddIn) (*AddOut, error)
	SetOsByID(context.Context, *SetByIdIn) (*SetByIdOut, error)
	DeleteOsByID(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error)
	mustEmbedUnimplementedOptionhubServiceServer()
}

// UnimplementedOptionhubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOptionhubServiceServer struct{}

func (UnimplementedOptionhubServiceServer) GetOsBySearchName(context.Context, *GetByNameIn) (*GetByNameOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOsBySearchName not implemented")
}
func (UnimplementedOptionhubServiceServer) GetOsByID(context.Context, *GetByIdIn) (*GetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOsByID not implemented")
}
func (UnimplementedOptionhubServiceServer) GetAllOs(context.Context, *GetAllIn) (*GetAllOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOs not implemented")
}
func (UnimplementedOptionhubServiceServer) AddOs(context.Context, *AddIn) (*AddOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOs not implemented")
}
func (UnimplementedOptionhubServiceServer) SetOsByID(context.Context, *SetByIdIn) (*SetByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOsByID not implemented")
}
func (UnimplementedOptionhubServiceServer) DeleteOsByID(context.Context, *DeleteByIdIn) (*DeleteByIdOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOsByID not implemented")
}
func (UnimplementedOptionhubServiceServer) mustEmbedUnimplementedOptionhubServiceServer() {}
func (UnimplementedOptionhubServiceServer) testEmbeddedByValue()                          {}

// UnsafeOptionhubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionhubServiceServer will
// result in compilation errors.
type UnsafeOptionhubServiceServer interface {
	mustEmbedUnimplementedOptionhubServiceServer()
}

func RegisterOptionhubServiceServer(s grpc.ServiceRegistrar, srv OptionhubServiceServer) {
	// If the following call pancis, it indicates UnimplementedOptionhubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OptionhubService_ServiceDesc, srv)
}

func _OptionhubService_GetOsBySearchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetOsBySearchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetOsBySearchName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetOsBySearchName(ctx, req.(*GetByNameIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetOsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetOsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetOsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetOsByID(ctx, req.(*GetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_GetAllOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).GetAllOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_GetAllOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).GetAllOs(ctx, req.(*GetAllIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_AddOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).AddOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_AddOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).AddOs(ctx, req.(*AddIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_SetOsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).SetOsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_SetOsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).SetOsByID(ctx, req.(*SetByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionhubService_DeleteOsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionhubServiceServer).DeleteOsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionhubService_DeleteOsByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionhubServiceServer).DeleteOsByID(ctx, req.(*DeleteByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionhubService_ServiceDesc is the grpc.ServiceDesc for OptionhubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionhubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OptionhubService",
	HandlerType: (*OptionhubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOsBySearchName",
			Handler:    _OptionhubService_GetOsBySearchName_Handler,
		},
		{
			MethodName: "GetOsByID",
			Handler:    _OptionhubService_GetOsByID_Handler,
		},
		{
			MethodName: "GetAllOs",
			Handler:    _OptionhubService_GetAllOs_Handler,
		},
		{
			MethodName: "AddOs",
			Handler:    _OptionhubService_AddOs_Handler,
		},
		{
			MethodName: "SetOsByID",
			Handler:    _OptionhubService_SetOsByID_Handler,
		},
		{
			MethodName: "DeleteOsByID",
			Handler:    _OptionhubService_DeleteOsByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "optionhub.proto",
}
